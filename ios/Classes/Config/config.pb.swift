// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: config.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///option java_multiple_files = true;
enum LogLevel: SwiftProtobuf.Enum {
  typealias RawValue = Int

  //// normalizes to NONE
  case none // = 0
  case verbose // = 8
  case debug // = 3
  case info // = 4
  case warn // = 5
  case error // = 6
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 3: self = .debug
    case 4: self = .info
    case 5: self = .warn
    case 6: self = .error
    case 8: self = .verbose
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .debug: return 3
    case .info: return 4
    case .warn: return 5
    case .error: return 6
    case .verbose: return 8
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension LogLevel: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [LogLevel] = [
    .none,
    .verbose,
    .debug,
    .info,
    .warn,
    .error,
  ]
}

#endif  // swift(>=4.2)

enum Site: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case us // = 0
  case eu // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .us
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .us
    case 1: self = .eu
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .us: return 0
    case .eu: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Site: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Site] = [
    .us,
    .eu,
  ]
}

#endif  // swift(>=4.2)

//// Enum of authorized/enabled Features.
enum Feature: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case enableAll // = 0
  case enableInAppAutomation // = 2
  case enableMessageCenter // = 3
  case enablePush // = 4
  case enableChat // = 5
  case enableAnalytics // = 6
  case enableTagsAndAttributes // = 7
  case enableContacts // = 8
  case enableLocation // = 9
  case enableNone // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .enableAll
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .enableAll
    case 1: self = .enableNone
    case 2: self = .enableInAppAutomation
    case 3: self = .enableMessageCenter
    case 4: self = .enablePush
    case 5: self = .enableChat
    case 6: self = .enableAnalytics
    case 7: self = .enableTagsAndAttributes
    case 8: self = .enableContacts
    case 9: self = .enableLocation
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .enableAll: return 0
    case .enableNone: return 1
    case .enableInAppAutomation: return 2
    case .enableMessageCenter: return 3
    case .enablePush: return 4
    case .enableChat: return 5
    case .enableAnalytics: return 6
    case .enableTagsAndAttributes: return 7
    case .enableContacts: return 8
    case .enableLocation: return 9
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Feature: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Feature] = [
    .enableAll,
    .enableInAppAutomation,
    .enableMessageCenter,
    .enablePush,
    .enableChat,
    .enableAnalytics,
    .enableTagsAndAttributes,
    .enableContacts,
    .enableLocation,
    .enableNone,
  ]
}

#endif  // swift(>=4.2)

struct AirshipEnv {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appKey: String = String()

  var appSecret: String = String()

  var logLevel: LogLevel = .none

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct AndroidNotificationConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// The icon resource name.
  var icon: String = String()

  //// The large icon resource name.
  var largeIcon: String = String()

  //// The accent color.
  //// Must be a hex value #AARRGGBB.
  //// Provide it as Color in flutter
  var accentColor: String = String()

  //// The default android notification channel ID.
  var defaultChannelID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct AndroidConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// App store URI
  var appStoreUri: String = String()

  //// Fcm app name if using multiple FCM projects.
  var fcmFirebaseAppName: String = String()

  //// Notification config.
  var notification: AndroidNotificationConfig {
    get {return _notification ?? AndroidNotificationConfig()}
    set {_notification = newValue}
  }
  /// Returns true if `notification` has been explicitly set.
  var hasNotification: Bool {return self._notification != nil}
  /// Clears the value of `notification`. Subsequent reads from it will return its default value.
  mutating func clearNotification() {self._notification = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _notification: AndroidNotificationConfig? = nil
}

struct IosConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// itunesId for rate app and app store deep links.
  var itunesID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct AirshipConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// Production environment.
  //// Overrides default environment if [inProduction] is true.
  var production: AirshipEnv {
    get {return _storage._production ?? AirshipEnv()}
    set {_uniqueStorage()._production = newValue}
  }
  /// Returns true if `production` has been explicitly set.
  var hasProduction: Bool {return _storage._production != nil}
  /// Clears the value of `production`. Subsequent reads from it will return its default value.
  mutating func clearProduction() {_uniqueStorage()._production = nil}

  //// Development environment.
  //// Overrides default environment if [inProduction] is false.
  var development: AirshipEnv {
    get {return _storage._development ?? AirshipEnv()}
    set {_uniqueStorage()._development = newValue}
  }
  /// Returns true if `development` has been explicitly set.
  var hasDevelopment: Bool {return _storage._development != nil}
  /// Clears the value of `development`. Subsequent reads from it will return its default value.
  mutating func clearDevelopment() {_uniqueStorage()._development = nil}

  var defaultEnv: AirshipEnv {
    get {return _storage._defaultEnv ?? AirshipEnv()}
    set {_uniqueStorage()._defaultEnv = newValue}
  }
  /// Returns true if `defaultEnv` has been explicitly set.
  var hasDefaultEnv: Bool {return _storage._defaultEnv != nil}
  /// Clears the value of `defaultEnv`. Subsequent reads from it will return its default value.
  mutating func clearDefaultEnv() {_uniqueStorage()._defaultEnv = nil}

  var android: AndroidConfig {
    get {return _storage._android ?? AndroidConfig()}
    set {_uniqueStorage()._android = newValue}
  }
  /// Returns true if `android` has been explicitly set.
  var hasAndroid: Bool {return _storage._android != nil}
  /// Clears the value of `android`. Subsequent reads from it will return its default value.
  mutating func clearAndroid() {_uniqueStorage()._android = nil}

  //// Switches the environment from development or production.
  //// If the value is not set,
  //// Airship will determine the value at runtime.
  var inProduction: Bool {
    get {return _storage._inProduction}
    set {_uniqueStorage()._inProduction = newValue}
  }

  //// Cloud site.
  var site: Site {
    get {return _storage._site}
    set {_uniqueStorage()._site = newValue}
  }

  //// URL allow list.
  var urlAllowList: [String] {
    get {return _storage._urlAllowList}
    set {_uniqueStorage()._urlAllowList = newValue}
  }

  //// URL allow list for open URL scope.
  var urlAllowListScopeOpenURL: [String] {
    get {return _storage._urlAllowListScopeOpenURL}
    set {_uniqueStorage()._urlAllowListScopeOpenURL = newValue}
  }

  //// URL allow list for JS bridge injection.
  var urlAllowlistScopeJavascriptInterface: [String] {
    get {return _storage._urlAllowlistScopeJavascriptInterface}
    set {_uniqueStorage()._urlAllowlistScopeJavascriptInterface = newValue}
  }

  //// Enables delayed channel creation.
  var isChannelCreationDelayEnabled: Bool {
    get {return _storage._isChannelCreationDelayEnabled}
    set {_uniqueStorage()._isChannelCreationDelayEnabled = newValue}
  }

  //// Enables/disables requiring initial remote config fetch before
  //// creating a channel.
  var requireInitialRemoteConfigEnabled: Bool {
    get {return _storage._requireInitialRemoteConfigEnabled}
    set {_uniqueStorage()._requireInitialRemoteConfigEnabled = newValue}
  }

  //// Enabled features. Defaults to all.
  var featuresEnabled: [Feature] {
    get {return _storage._featuresEnabled}
    set {_uniqueStorage()._featuresEnabled = newValue}
  }

  //// iOS config.
  var ios: IosConfig {
    get {return _storage._ios ?? IosConfig()}
    set {_uniqueStorage()._ios = newValue}
  }
  /// Returns true if `ios` has been explicitly set.
  var hasIos: Bool {return _storage._ios != nil}
  /// Clears the value of `ios`. Subsequent reads from it will return its default value.
  mutating func clearIos() {_uniqueStorage()._ios = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension LogLevel: @unchecked Sendable {}
extension Site: @unchecked Sendable {}
extension Feature: @unchecked Sendable {}
extension AirshipEnv: @unchecked Sendable {}
extension AndroidNotificationConfig: @unchecked Sendable {}
extension AndroidConfig: @unchecked Sendable {}
extension IosConfig: @unchecked Sendable {}
extension AirshipConfig: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension LogLevel: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    3: .same(proto: "DEBUG"),
    4: .same(proto: "INFO"),
    5: .same(proto: "WARN"),
    6: .same(proto: "ERROR"),
    8: .same(proto: "VERBOSE"),
  ]
}

extension Site: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SITE_US"),
    1: .same(proto: "SITE_EU"),
  ]
}

extension Feature: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ENABLE_ALL"),
    1: .same(proto: "ENABLE_NONE"),
    2: .same(proto: "ENABLE_IN_APP_AUTOMATION"),
    3: .same(proto: "ENABLE_MESSAGE_CENTER"),
    4: .same(proto: "ENABLE_PUSH"),
    5: .same(proto: "ENABLE_CHAT"),
    6: .same(proto: "ENABLE_ANALYTICS"),
    7: .same(proto: "ENABLE_TAGS_AND_ATTRIBUTES"),
    8: .same(proto: "ENABLE_CONTACTS"),
    9: .same(proto: "ENABLE_LOCATION"),
  ]
}

extension AirshipEnv: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "AirshipEnv"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_key"),
    2: .standard(proto: "app_secret"),
    3: .standard(proto: "log_level"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.appKey) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.appSecret) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.logLevel) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appKey.isEmpty {
      try visitor.visitSingularStringField(value: self.appKey, fieldNumber: 1)
    }
    if !self.appSecret.isEmpty {
      try visitor.visitSingularStringField(value: self.appSecret, fieldNumber: 2)
    }
    if self.logLevel != .none {
      try visitor.visitSingularEnumField(value: self.logLevel, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AirshipEnv, rhs: AirshipEnv) -> Bool {
    if lhs.appKey != rhs.appKey {return false}
    if lhs.appSecret != rhs.appSecret {return false}
    if lhs.logLevel != rhs.logLevel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AndroidNotificationConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "AndroidNotificationConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "icon"),
    2: .standard(proto: "large_icon"),
    3: .standard(proto: "accent_color"),
    4: .standard(proto: "default_channel_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.largeIcon) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.accentColor) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.defaultChannelID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 1)
    }
    if !self.largeIcon.isEmpty {
      try visitor.visitSingularStringField(value: self.largeIcon, fieldNumber: 2)
    }
    if !self.accentColor.isEmpty {
      try visitor.visitSingularStringField(value: self.accentColor, fieldNumber: 3)
    }
    if !self.defaultChannelID.isEmpty {
      try visitor.visitSingularStringField(value: self.defaultChannelID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AndroidNotificationConfig, rhs: AndroidNotificationConfig) -> Bool {
    if lhs.icon != rhs.icon {return false}
    if lhs.largeIcon != rhs.largeIcon {return false}
    if lhs.accentColor != rhs.accentColor {return false}
    if lhs.defaultChannelID != rhs.defaultChannelID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AndroidConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "AndroidConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_store_uri"),
    2: .standard(proto: "fcm_firebase_app_name"),
    3: .same(proto: "notification"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.appStoreUri) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.fcmFirebaseAppName) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._notification) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.appStoreUri.isEmpty {
      try visitor.visitSingularStringField(value: self.appStoreUri, fieldNumber: 1)
    }
    if !self.fcmFirebaseAppName.isEmpty {
      try visitor.visitSingularStringField(value: self.fcmFirebaseAppName, fieldNumber: 2)
    }
    try { if let v = self._notification {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AndroidConfig, rhs: AndroidConfig) -> Bool {
    if lhs.appStoreUri != rhs.appStoreUri {return false}
    if lhs.fcmFirebaseAppName != rhs.fcmFirebaseAppName {return false}
    if lhs._notification != rhs._notification {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension IosConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "IosConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "itunes_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.itunesID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.itunesID.isEmpty {
      try visitor.visitSingularStringField(value: self.itunesID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: IosConfig, rhs: IosConfig) -> Bool {
    if lhs.itunesID != rhs.itunesID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AirshipConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "AirshipConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "production"),
    2: .same(proto: "development"),
    13: .standard(proto: "default_env"),
    3: .same(proto: "android"),
    4: .standard(proto: "in_production"),
    5: .same(proto: "site"),
    6: .standard(proto: "url_allow_list"),
    7: .standard(proto: "url_allow_list_scope_open_url"),
    8: .standard(proto: "url_allowlist_scope_javascript_interface"),
    9: .standard(proto: "is_channel_creation_delay_enabled"),
    10: .standard(proto: "require_initial_remote_config_enabled"),
    11: .standard(proto: "features_enabled"),
    12: .same(proto: "ios"),
  ]

  fileprivate class _StorageClass {
    var _production: AirshipEnv? = nil
    var _development: AirshipEnv? = nil
    var _defaultEnv: AirshipEnv? = nil
    var _android: AndroidConfig? = nil
    var _inProduction: Bool = false
    var _site: Site = .us
    var _urlAllowList: [String] = []
    var _urlAllowListScopeOpenURL: [String] = []
    var _urlAllowlistScopeJavascriptInterface: [String] = []
    var _isChannelCreationDelayEnabled: Bool = false
    var _requireInitialRemoteConfigEnabled: Bool = false
    var _featuresEnabled: [Feature] = []
    var _ios: IosConfig? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _production = source._production
      _development = source._development
      _defaultEnv = source._defaultEnv
      _android = source._android
      _inProduction = source._inProduction
      _site = source._site
      _urlAllowList = source._urlAllowList
      _urlAllowListScopeOpenURL = source._urlAllowListScopeOpenURL
      _urlAllowlistScopeJavascriptInterface = source._urlAllowlistScopeJavascriptInterface
      _isChannelCreationDelayEnabled = source._isChannelCreationDelayEnabled
      _requireInitialRemoteConfigEnabled = source._requireInitialRemoteConfigEnabled
      _featuresEnabled = source._featuresEnabled
      _ios = source._ios
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._production) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._development) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._android) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._inProduction) }()
        case 5: try { try decoder.decodeSingularEnumField(value: &_storage._site) }()
        case 6: try { try decoder.decodeRepeatedStringField(value: &_storage._urlAllowList) }()
        case 7: try { try decoder.decodeRepeatedStringField(value: &_storage._urlAllowListScopeOpenURL) }()
        case 8: try { try decoder.decodeRepeatedStringField(value: &_storage._urlAllowlistScopeJavascriptInterface) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._isChannelCreationDelayEnabled) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._requireInitialRemoteConfigEnabled) }()
        case 11: try { try decoder.decodeRepeatedEnumField(value: &_storage._featuresEnabled) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._ios) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._defaultEnv) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._production {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._development {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._android {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if _storage._inProduction != false {
        try visitor.visitSingularBoolField(value: _storage._inProduction, fieldNumber: 4)
      }
      if _storage._site != .us {
        try visitor.visitSingularEnumField(value: _storage._site, fieldNumber: 5)
      }
      if !_storage._urlAllowList.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._urlAllowList, fieldNumber: 6)
      }
      if !_storage._urlAllowListScopeOpenURL.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._urlAllowListScopeOpenURL, fieldNumber: 7)
      }
      if !_storage._urlAllowlistScopeJavascriptInterface.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._urlAllowlistScopeJavascriptInterface, fieldNumber: 8)
      }
      if _storage._isChannelCreationDelayEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._isChannelCreationDelayEnabled, fieldNumber: 9)
      }
      if _storage._requireInitialRemoteConfigEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._requireInitialRemoteConfigEnabled, fieldNumber: 10)
      }
      if !_storage._featuresEnabled.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._featuresEnabled, fieldNumber: 11)
      }
      try { if let v = _storage._ios {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._defaultEnv {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AirshipConfig, rhs: AirshipConfig) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._production != rhs_storage._production {return false}
        if _storage._development != rhs_storage._development {return false}
        if _storage._defaultEnv != rhs_storage._defaultEnv {return false}
        if _storage._android != rhs_storage._android {return false}
        if _storage._inProduction != rhs_storage._inProduction {return false}
        if _storage._site != rhs_storage._site {return false}
        if _storage._urlAllowList != rhs_storage._urlAllowList {return false}
        if _storage._urlAllowListScopeOpenURL != rhs_storage._urlAllowListScopeOpenURL {return false}
        if _storage._urlAllowlistScopeJavascriptInterface != rhs_storage._urlAllowlistScopeJavascriptInterface {return false}
        if _storage._isChannelCreationDelayEnabled != rhs_storage._isChannelCreationDelayEnabled {return false}
        if _storage._requireInitialRemoteConfigEnabled != rhs_storage._requireInitialRemoteConfigEnabled {return false}
        if _storage._featuresEnabled != rhs_storage._featuresEnabled {return false}
        if _storage._ios != rhs_storage._ios {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

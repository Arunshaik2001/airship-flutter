//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: config.proto

package com.airship.flutter.config

@kotlin.jvm.JvmSynthetic
inline fun androidNotificationConfig(block: com.airship.flutter.config.AndroidNotificationConfigKt.Dsl.() -> kotlin.Unit): com.airship.flutter.config.Config.AndroidNotificationConfig =
  com.airship.flutter.config.AndroidNotificationConfigKt.Dsl._create(com.airship.flutter.config.Config.AndroidNotificationConfig.newBuilder()).apply { block() }._build()
object AndroidNotificationConfigKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: com.airship.flutter.config.Config.AndroidNotificationConfig.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.airship.flutter.config.Config.AndroidNotificationConfig.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.airship.flutter.config.Config.AndroidNotificationConfig = _builder.build()

    /**
     * <pre>
     *&#47; The icon resource name.
     * </pre>
     *
     * <code>string icon = 1;</code>
     */
    var icon: kotlin.String
      @JvmName("getIcon")
      get() = _builder.icon
      @JvmName("setIcon")
      set(value) {
          _builder.icon = value
      }
    /**
     * <pre>
     *&#47; The icon resource name.
     * </pre>
     *
     * <code>string icon = 1;</code>
     */
    fun clearIcon() {
      _builder.clearIcon()
    }

    /**
     * <pre>
     *&#47; The large icon resource name.
     * </pre>
     *
     * <code>string large_icon = 2;</code>
     */
    var largeIcon: kotlin.String
      @JvmName("getLargeIcon")
      get() = _builder.largeIcon
      @JvmName("setLargeIcon")
      set(value) {
          _builder.largeIcon = value
      }
    /**
     * <pre>
     *&#47; The large icon resource name.
     * </pre>
     *
     * <code>string large_icon = 2;</code>
     */
    fun clearLargeIcon() {
      _builder.clearLargeIcon()
    }

    /**
     * <pre>
     *&#47; The accent color.
     * / Must be a hex value #AARRGGBB.
     * / Provide it as Color in flutter
     * </pre>
     *
     * <code>string accent_color = 3;</code>
     */
    var accentColor: kotlin.String
      @JvmName("getAccentColor")
      get() = _builder.accentColor
      @JvmName("setAccentColor")
      set(value) {
          _builder.accentColor = value
      }
    /**
     * <pre>
     *&#47; The accent color.
     * / Must be a hex value #AARRGGBB.
     * / Provide it as Color in flutter
     * </pre>
     *
     * <code>string accent_color = 3;</code>
     */
    fun clearAccentColor() {
      _builder.clearAccentColor()
    }

    /**
     * <pre>
     *&#47; The default android notification channel ID.
     * </pre>
     *
     * <code>string default_channel_id = 4;</code>
     */
    var defaultChannelId: kotlin.String
      @JvmName("getDefaultChannelId")
      get() = _builder.defaultChannelId
      @JvmName("setDefaultChannelId")
      set(value) {
          _builder.defaultChannelId = value
      }
    /**
     * <pre>
     *&#47; The default android notification channel ID.
     * </pre>
     *
     * <code>string default_channel_id = 4;</code>
     */
    fun clearDefaultChannelId() {
      _builder.clearDefaultChannelId()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun com.airship.flutter.config.Config.AndroidNotificationConfig.copy(block: com.airship.flutter.config.AndroidNotificationConfigKt.Dsl.() -> kotlin.Unit): com.airship.flutter.config.Config.AndroidNotificationConfig =
  com.airship.flutter.config.AndroidNotificationConfigKt.Dsl._create(this.toBuilder()).apply { block() }._build()

//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: config.proto

package com.airship.flutter.config;

@kotlin.jvm.JvmSynthetic
public inline fun airshipEnv(block: com.airship.flutter.config.AirshipEnvKt.Dsl.() -> kotlin.Unit): com.airship.flutter.config.Config.AirshipEnv =
  com.airship.flutter.config.AirshipEnvKt.Dsl._create(com.airship.flutter.config.Config.AirshipEnv.newBuilder()).apply { block() }._build()
public object AirshipEnvKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.airship.flutter.config.Config.AirshipEnv.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.airship.flutter.config.Config.AirshipEnv.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.airship.flutter.config.Config.AirshipEnv = _builder.build()

    /**
     * <code>string app_key = 1;</code>
     */
    public var appKey: kotlin.String
      @JvmName("getAppKey")
      get() = _builder.getAppKey()
      @JvmName("setAppKey")
      set(value) {
        _builder.setAppKey(value)
      }
    /**
     * <code>string app_key = 1;</code>
     */
    public fun clearAppKey() {
      _builder.clearAppKey()
    }

    /**
     * <code>string app_secret = 2;</code>
     */
    public var appSecret: kotlin.String
      @JvmName("getAppSecret")
      get() = _builder.getAppSecret()
      @JvmName("setAppSecret")
      set(value) {
        _builder.setAppSecret(value)
      }
    /**
     * <code>string app_secret = 2;</code>
     */
    public fun clearAppSecret() {
      _builder.clearAppSecret()
    }

    /**
     * <code>.LogLevel log_level = 3;</code>
     */
    public var logLevel: com.airship.flutter.config.Config.LogLevel
      @JvmName("getLogLevel")
      get() = _builder.getLogLevel()
      @JvmName("setLogLevel")
      set(value) {
        _builder.setLogLevel(value)
      }
    /**
     * <code>.LogLevel log_level = 3;</code>
     */
    public fun clearLogLevel() {
      _builder.clearLogLevel()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.airship.flutter.config.Config.AirshipEnv.copy(block: com.airship.flutter.config.AirshipEnvKt.Dsl.() -> kotlin.Unit): com.airship.flutter.config.Config.AirshipEnv =
  com.airship.flutter.config.AirshipEnvKt.Dsl._create(this.toBuilder()).apply { block() }._build()
